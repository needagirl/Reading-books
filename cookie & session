쿠키와 세션을 이해하기 위해서는 먼저 http의 특징에 대해 이해하면 도움이 됩니다.

비연결성(Connectionless)


HTTP(Hypertext Transfer Protocol)는 인터넷상에서 데이터를 주고 받기 위해 서버/클라이언트 모델을 따르는 통신규약을 말합니다. 이 HTTP 프로토콜에는 비연결성(Connectionless)과 비상태성(Stateless)이라는 특징이 있습니다.

이는 서버의 자원을 절약하기 위해 모든 사용자의 요청마다 연결과 해제의 과정을 거치기 때문에 연결 상태가 유지되지 않고, 연결 해제 후에 상태 정보가 저장되지 않는다는 것입니다.

 

하지만, 이로 인해 사용자를 식별할 수 없어서 같은 사용자가 요청을

여러번 하더라도 매번 새로운 사용자로 인식하는 단점이 있습니다.

 

하지만 우리가 사용하고 있는 웹사이트를 생각해보면

로그인을 한 번 하고나면 그 사이트에서는 다시 로그인할 필요 없이

여러 페이지의 기능들을 이용할 수 있고 심지어 브라우저를 종료했다가

나중에 다시 접속했을 때도 그 로그인 상태를 유지할 수도 있습니다.

 

이렇게 HTTP의 비연결성과 비상태성을 보완하여 서버가 클라이언트를 식별하게 해주는 것이 쿠키와 세션입니다. 

 

📌쿠키의 개념

쿠키는 웹 사이트에 접속할 때 생성되는 정보를 담은 임시 파일

쿠키는 서버가 사용자의 웹 브라우저에 저장하는 데이터를 말합니다.

쿠키의 데이터 형태는 Key 와 Value로 구성되고 String 형태로 이루어져 있습니다.

브라우저마다 저장되는 쿠키는 다릅니다. (크롬으로 남긴 쿠키는 인터넷 익스플로어에서 사용할 수 없습니다.)
서버에서는 브라우저가 다르면 다른 사용자로 인식합니다.
 

쿠키는 서버를 대신해서 이러한 정보들을 웹 브라우저에 저장

(정확히는, 웹 브라우저를 이용하고 있는 컴퓨터에 저장)하고

사용자가 요청을 할 때 그 정보를 함께 보내서 서버가 사용자를 식별할 수 있게 해줍니다.

 


📌쿠키의 사용목적

쿠키는 주로 아래의 세 가지 목적을 위해 사용됩니다.

1. 세션 관리(Session Management) 로그인, 사용자 닉네임, 접속 시간, 장바구니 등의 서버가 알아야할 정보들을 저장합니다.

2. 개인화(Personalization) 사용자마다 다르게 그 사람에 적절한 페이지를 보여줄 수 있습니다.

3. 트래킹(Tracking) 사용자의 행동과 패턴을 분석하고 기록합니다.

 

📌쿠키가 사용되는 예시

쿠키가 있기 때문에 여러 페이지를 이동할 때마다 로그인을 하지 않고 사용자 정보를 유지할 수 있는 것입니다.

쿠키가 없다면 다음 페이지로 정보를 파라미터로 넘겨줘야 합니다.

 

ID 저장, 로그인 상태 유지
일주일간 다시 보지 않기.
최근 검색한 상품들을 광고에서 추천
쇼핑몰 장바구니 기능
📌쿠키의 단점 

1. 방문했던 웹 사이트에 대한 정보 및 개인정보가 기록되기 때문에 사생활을 침해할 소지가 있으며, 이를 해소하기 위해서 웹 브라우저 자체에 쿠키 거부 기능이 있습니다. 이러한 쿠키에 대한 거부가 웹 브라우저에 설정되어 있으면,

쿠키 본래의 목적인 웹 브라우저와의 연결을 지속시키는 기능을 수행할 수 없는 경우가 발생합니다.

 

2.  서버가 가지고 있는 것이 아니라 사용자에게 저장되기 때문에, 임의로 고치거나 지울 수 있고, 가로채기도 쉬워 보안이 취약합니다. 따라서 , 쿠키에는 민감하거나 중요한 정보를 담는 것은 위험합니다.

 

그래서 이런 단점을 보완해주는 것이 세션입니다.

 

 

 

 

📌세션의 특징

세션 아이디는 웹 브라우저 당 1개씩 생성되어 웹 컨테이너에 저장되며 브라우저 종료시 소멸됩니다.

로그인한 사용자에 대해서만 세션을 생성하는 것이 아니라  

로그아웃하면 새로운 사용자로 인식해서 새로운 세션이 생성됩니다.

(참고로 쿠키는 내 웹브라우저에 저장된 것이기 때문에 로그아웃 유무와 관계없이 삭제하지 않으면 유지됩니다.)

 

아이디, 닉네임 등의 정보를 세션에 담아두면 요청이 있을 때 마다, DB에 접근할 필요가 없어서 효율적입니다.

쿠키와 세션을 활용해 사용자를 확인하는 방식을 도식화해보자면 다음과 같습니다.


1. 서버에서는 사용자로부터 요청이 있을 때 사용자를 구분하기 위한 임시쿠키 하나를 보내 저장하도록 한다.
2. 저장된 쿠키는 웹 브라우저의 쿠키저장소에 저장된다.
3. 이후 같은 사이트의 서버를 방문할 때마다, 저장된 쿠키를 요청할 header에 담아 함께  다시 서버로 전송한다.
서버는 전송받은 쿠키와 서버에 저장된 사용자 정보를 비교하여 같은 사용자임을 확인한다.
 

📌세션(Session) 사용하기

 

세션의 속성 설정하기 :  session 객체의 setAttribute() 메소드 사용

session.setAttribute("id", "value");
session 객체의 setAttribute() 메소드를 사용해서

세션의 속성을 지정하게 되면 계속 상태를 유지하는 기능을 사용할 수 있게 됩니다.

 

 

세션의 속성을 사용하기 : session 객체의 getAttribute() 메소드

String id = (String)session.getAttribute("id");
 

단, getAttribute() 메소드는 리턴 타입이 Object 타입이므로 사용 시

실제 할당된 객체 타입으로 형변환(casting)을 해야 합니다!

 

 

세션의 속성 삭제하기 : session 객체의 removeAttribute() 메소드

session.removeAttribute("id");
 

세션의 모든 속성 삭제 : session 객체의 invalidate() 메소드

session.invalidate();
 

마지막으로 쿠키와 세션을 비교해보자면,

 	Cookie	Session
저장위치	클라이언트	서버
저장형식	text	Object
리소스	클라이언트의 리소스	서버의 리소스
용량제한	도메인당 20개, 1쿠키당 4KB	제한 없음
만료시점	쿠키 저장시 설정(설정 없을 시에는 브라우저 종료시 만료)	알 수 없음
1. 저장위치

- 쿠키 : 클라이언트의 웹 브라우저가 지정하는 메모리 또는 하드디스크에 저장

(단, 쿠키를 허용하지 않은 경우에는 저장되지 않습니다.)

- 세션 : 서버의 메모리에 저장

2. 저장형식

- 쿠키 : text형식으로 저장

- 서버 : Object 형식으로 저장

 

3. 리소스(사용되는 자원)

- 쿠키 : 클라이언트에 저장되고 클라이언트의 메모리를 사용하기 때문에 서버의 자원을 사용하지 않음

- 세션 : 세션은 서버에 저장되고 서버의 메모리로 로딩이 되기 때문에 세션이 생길때마다 서버의 리소스를 차지

 

4. 용량제한

- 쿠키 : 클라이언트도 모르게 접속되는 사이트에 의하여 설정될 수 있기 때문에 쿠키로 인해 문제가 발생하는 것을

막고자  한 도메인당 20개 /하나의 쿠키 당 4KB로 제한

- 세션 : 갯수나 용량에 제한이 없음

 

5. 만료시점

- 쿠키 : 저장할 때 expires 속성을 정의해 무효화 시키면 삭제될 날짜를 지정할 수 있음

(따로 지정되지 않은 경우에는 브라우저 종료시 만료)

- 세션 : 클라이언트가 로그아웃하거나, 설정한 시간동안 반응이 없을경우 무효화 되기 때문에 정확한 시점을 알 수 없음

 

 

 

💡간단요약


쿠키와 세션 비교
쿠키는 자동완성이나, 팝업 일주일간 보지 않기 등 사용자의 편의를 위하는 것이지만

지워져도 되고, 조작되거나 가로채이더라도 큰 지장이 없는 수준의 정보들을 저장하는데 사용됩니다.

 

그리고 사용자나 다른 누군가에게 노출되면 안되는 중요한 정보들은 세션으로 서버안에서 다뤄집니다.

 

쿠키로 노출시켜서는 안될 정보들이 있고, 세션을 남발하면 서버에 부담이 되어 과부하가 일어나기 때문에

웹을 설계할 때는 이 정보는 쿠키에 저장할 지 세션에 저장할 지 적절한 판단을 내릴 수 있어야 합니다.



출처: https://devuna.tistory.com/23 [튜나 개발일기]
